New Data Definitions:

A Table_Method_Program is
        {tables:        [Table]}

A Table is
        {examples:      [Example],
         formulas:      [Formula],
         params:        [Parameters],
         name:          Name_Input,
         signature:     String,
         purpose:       String,
         key:           Number}

An Example is
        {inputs:        [Inputs],
         want:          Program_Input,
         key:           Number}

An Input is
        {prog:          Program_Input,
         key:           Number}

A Formula is one of
        - Boolean Formula
        - Non-Boolean Formula

A Boolean Formula is
        {prog:          Program_Input,
         outputs:       [Output],
         thenChildren:  [Formula],
         key:           Number}

A Non-Boolean Formula is
        {prog:          Program_Input,
         outputs:       [Output],
         key:           Number}

A Parameters_And_Key is
        {params:        [Parameter],
         nextKey:       Number}

A Parameter is
        {name:          Name_Input,
         key:           Number}

An Output is one of
        - Program
        - Error
        - Gray
        - Pink
        - Yellow

A Program_Input is one of
        - Program
        - Yellow (initial value)

A Name_Input is one of
        - String
        - Yellow (initial value)

A Program is one of
        -  Variable
        -  Application
        -  RFunction
        -  RNum
        -  RBool
        -  RString
        -  RList
        -  RSym
        -  RImage
        -  RColor
        -  RStruct

A Variable is a
        {value: String,
         type:  0}

An Application is a
        {value: {funct: RFunction,
                 args:  [Program]},
         type:  1}

A RFunction is a
        {value: Function
         type:  2}

An RNum is a
        {value: Number,
         type:  3}

An RBool is a
        {value: Boolean,
         type:  4}

An RString is a
        {value: String,
         type:  5}

An RList is a
        {value: List,
         type:  6}

A List is one of
        - Null
        - {a: Program,
           d: RList}

An RSym is a
        {value: string,
         type: 7}
         
An RImage is a
        {value: Image,
         type:  8}

An RColor is a
        {value: Color,
         type:  8}


An Image is one of
        - Circle
        - Rectangle
        - Triangle
        - Beside
        - Above
        - Overlay
        - Place

A Circle is
        {r:     Integer,
         color: Color,
         mode:  String,
         type:  'circle'}
     
A Rectangle is
        {width:  Integer,
         height: Integer,
         color:  Color,
         mode:   String,
         type:   'rect'}
         
A Triangle is                   
        {A:      Integer,             /\
         B:      Integer,            /  \
         C:      Integer,        B  /    \  C
         color:  Color,            /      \
         mode:   String,          /________\
         type:   'triangle'}          A      
       
    note: only acute triangles are handled
       
A Beside is
        {type:   'beside',
         yplace:  String,
         images: [Image]} note: images must be non-empty
       
An Above is
        {type:   'above',
         xplace:  String,
         images: [Image]} note: images must be non-empty

An Overlay is
        {type:   'overlay',
         yplace: String
         xplace: String,
         images: [Image]} note: images must be non-empty
       
 Place is
       {type: place,
        x:     Integer,
        y:     Integer,
        image: Image,
        scene: Image}
       
A Color is
        {r: Integer,
         g: Integer,
         b: Integer,
         a: Integer}

A RClos is
        {parametes:   [String],
         environment: [Variable],
         body:        Program}

An RSTRUCT is
        {value: Struct,
         type: RSTRUCT_T}

A Struct is a
        {id:     Super-Id,
         fields: [Field]}

A Super-Id is a
        String?

A Field is a
        {id:      Field-Id,
         binding: Program}

A Field-Id is a
         String?

A Prefix Prog is one of
        - DefStruct
        - Define

A DefStruct is a
        {superID:  String,
         fieldIDs: [String],
         type: 'struct'}

A Define is a
        {name:    String,
         binding: Program,
         type:    'define'}
